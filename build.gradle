plugins {
    id "io.freefair.jsass-base" version "1.0.2"
    id "com.magnetichq.gradle.js" version "3.0.2"
}

task css(type: io.freefair.gradle.plugins.jsass.SassCompile) {
    sassPath = "${projectDir}/sass"
    cssPath = "${buildDir}/css"
    sourceMapEnabled = false
    outputStyle = io.bit3.jsass.OutputStyle.COMPRESSED
}

def createJsTask(name, files) {
    def combineTask = tasks.register("combine${name.capitalize()}Js", com.eriwen.gradle.js.tasks.CombineJsTask) {
        source = files
        dest = file("${buildDir}/js/${name}.js")
    }
    def minifyTask = tasks.register("minify${name.capitalize()}Js", com.eriwen.gradle.js.tasks.MinifyJsTask) {
        source = combineTask
        dest = file("${buildDir}/js/${name}.js")
    }
}

createJsTask('filesCurse', [
    "${projectDir}/js/sidebar.js",
    "${projectDir}/js/theme-switch-toggle.js",
    "${projectDir}/js/curse-ads.js",
    "${projectDir}/js/files.js"
])
createJsTask('filesGoogle', [
    "${projectDir}/js/sidebar.js",
    "${projectDir}/js/theme-switch-toggle.js",
    "${projectDir}/js/google-ads.js",
    "${projectDir}/js/files.js"
])
createJsTask('docs', [
    "${projectDir}/js/sidebar.js",
    "${projectDir}/js/theme-switch-toggle.js",
    "${projectDir}/js/docs.js"
])
createJsTask('themeSwitch', ["${projectDir}/js/theme-switch.js"])

task bundleFiles(type: Zip) {
    archiveBaseName = 'files-bundle'
    destinationDirectory = file("${buildDir}/distributions")
    from(minifyFilesCurseJs) {
        into 'static/js'
        rename ~/filesCurse/, 'merged-curse'
    }
    from(minifyFilesGoogleJs) {
        into 'static/js'
        rename ~/filesGoogle/, 'merged-google'
    }
    from(minifyThemeSwitchJs) {
        into 'static/js'
        rename ~/themeSwitch/, 'theme-switch'
    }
    from(css) {
        include 'website_*.css'
        into 'static/css'
        rename ~/website_([A-Za-z]+)/, 'styles_$1'
    }
    from("${projectDir}/css") {
        include '*.css'
        into 'static/css'
    }
    from("${projectDir}/images") {
        include '**'
        into 'static/images'
    }
    from("${projectDir}/docs") {
        include '**/*.html'
        into 'static'
    }
}

@groovy.transform.CompileStatic
static String digest(String data, String hash) {
    return java.security.MessageDigest.getInstance(hash).digest(data.bytes).encodeHex().toString()
}

def writeArtifact(group, name, version, classifier = null, String ext = 'jar') {
    String path = "${group}/${name}/${version}/${name}-${version}"
    if (classifier != null)
        path += '-' + classifier
    path += '.' + ext
    file("./test/maven/${path}").parentFile.mkdirs()
    file("./test/maven/${path}").text = path
    file("./test/maven/${path}.md5").text = digest(path, 'MD5')
    file("./test/maven/${path}.sha1").text = digest(path, 'SHA-1')
    file("./test/maven/${path}.sha256").text = digest(path, 'SHA-256')
}

def writeXml(group, name, vers) {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
    def path = "./test/maven/${group}/${name}"
    
    xml.metadata() {
        groupId(group.replace('/', '.'))
        artifactId(name)
        versioning() {
            release(vers[-1])
            latest(vers[-1])
            lastUpdated(20220101010000)
            versions() {
                vers.each { ver -> xml.version(ver) }
            }
        }
    }
    String data = writer.toString()
    file("${path}/").mkdirs()
    file("${path}/maven-metadata.xml").text = data
    file("${path}/maven-metadata.xml.md5").text = digest(data, 'MD5')
    file("${path}/maven-metadata.xml.sha1").text = digest(data, 'SHA-1')
    file("${path}/maven-metadata.xml.sha256").text = digest(data, 'SHA-256')
    file("${path}/page_config.json").text = new groovy.json.JsonBuilder([
            name: "Minecraft Forge",
            comments: false,
            downloads: true,
            shrink_dls: false,
            adfocus: "271228"
    ]).toPrettyString()
}

task deleteTestData(type: Delete) {
    delete './test/'
}

task generateMaven() {
    mustRunAfter deleteTestData
    doLast {
        List versions = []
        ['1.16.5-36.0', '1.16.5-36.1', '1.18.1-39.0', '1.18.1-39.1', '1.18.2-40.0'].each { ver ->
            def range = 0..8 // make eight builds for "beta" release period
            if (ver.endsWith('.1'))
                range = 0..2 // make three builds for "recommended" release period

            range.each { build ->
                versions.add("${ver}.${build}")
                writeArtifact('net/minecraftforge', 'forge', "${ver}.${build}")
                writeArtifact('net/minecraftforge', 'forge', "${ver}.${build}", 'userdev')
                writeArtifact('net/minecraftforge', 'forge', "${ver}.${build}", 'changelog', 'txt')
                writeArtifact('net/minecraftforge', 'forge', "${ver}.${build}", 'mdk', 'zip')
                writeArtifact('net/minecraftforge', 'forge', "${ver}.${build}", 'installer')
            }
        }
        writeXml('net/minecraftforge', 'forge', versions)
    }
}

task generateGlobalConfig() {
    mustRunAfter deleteTestData
    doLast {
        def file = file('./test/global_overrides.json')
        file.parentFile.mkdirs()
        file.text = new groovy.json.JsonBuilder([
            ad_left: '<span>Left Ad</span>',
            ad_middle: '<span>Middle Ad</span>',
            ad_right: '<span>Right Ad</span>'
        ]).toPrettyString()
    }
}

task extractBundledFiles(type: Copy, dependsOn: bundleFiles) {
    mustRunAfter deleteTestData
    from zipTree(bundleFiles.archiveFile)
    into file('./test/')
}

task runTestPageGen(type: Exec) {
    String os = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (os.contains('win')) {
        commandLine 'powershell', '-NoLogo', '-NoProfile', '-ExecutionPolicy', 'Unrestricted', './runTestPageGen.ps1'
    } else {
        // assume *nix
        // todo: test the *nix command
        commandLine 'sh', './runTestPageGen.sh'
    }
}

task setupPageGen(type: Exec) {
    String os = System.getProperty('os.name').toLowerCase(Locale.ROOT)
    if (os.contains('win')) {
        commandLine 'powershell', '-NoLogo', '-NoProfile', '-Command', 'pip install -r requirements.txt'
    } else {
        // assume *nix
        // todo: test the *nix command
        commandLine 'sh', '-c', 'pip install -r requirements.txt'
    }
}

task setupTest(dependsOn: [deleteTestData, extractBundledFiles, generateMaven, generateGlobalConfig, setupPageGen]) {
    doLast { file('./test/out').mkdirs() }
}
